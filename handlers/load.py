from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from data_base import sql_db as sq
from keyboards import kb_cancel, kb_client, kb_load
from datetime import date
from handlers import client


class FSMLoad(StatesGroup):
    choice = State()
    count = State()
    load= State()
    name = State()
    description = State()
    price = State()

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏
async def load_start(message: types.Message):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', reply_markup=kb_load)
    await FSMLoad.choice.set()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
async def load_choice(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    if message.text == 'üì∏–§–æ—Ç–æ':
        async with state.proxy() as data:
            data['format'] = '–§–æ—Ç–æ'
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', reply_markup=kb_cancel)
        await FSMLoad.count.set()
    elif message.text == 'üîâ–ê—É–¥–∏–æ':
        async with state.proxy() as data:
            data['format'] = '–ê—É–¥–∏–æ'
        await sq.sql_add_line(message.from_user.id,1,0)
        await message.answer('–û—Å—Ç–∞–≤—å—Ç–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=kb_cancel)
        await FSMLoad.load.set()
    elif message.text == 'üì©–¢–µ–∫—Å—Ç':
        async with state.proxy() as data:
            data['format'] = '–¢–µ–∫—Å—Ç'
        await sq.sql_add_line(message.from_user.id,1,0)
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ', reply_markup=kb_cancel)
        await FSMLoad.load.set()
    elif message.text == 'üìÅ–§–∞–π–ª':
        async with state.proxy() as data:
            data['format'] = '–§–∞–π–ª'
        await sq.sql_add_line(message.from_user.id,1,0)
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª', reply_markup=kb_cancel)
        await FSMLoad.load.set()
    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µüö´',reply_markup=kb_cancel)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def load_count(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    try:
        if message.content_type != 'text':
            raise ValueError
        max_cnt = int(message.text)
        if not (1 <= max_cnt <= 10):
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µüö´', reply_markup=kb_cancel)
        else:
            await sq.sql_add_line(message.from_user.id,max_cnt,0)
            async with state.proxy() as data:
                data['mat'] = []
            await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', reply_markup=kb_cancel)
            await FSMLoad.load.set()
    except (TypeError, ValueError):
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æüö´', reply_markup=kb_cancel)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def load_material(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    async with state.proxy() as data:
        if data['format']=='–§–æ—Ç–æ':
            if message.content_type == 'photo':
                data['mat'].append(message.photo[-1].file_id)
                await sq.sql_change_line(message.from_user.id)
            else:
                await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Çüö´', reply_markup=kb_cancel)
        elif data['format']=='–ê—É–¥–∏–æ':
            if message.content_type == 'voice':
                data['mat']=message.voice.file_id
                await sq.sql_change_line(message.from_user.id)
            else:
                await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Çüö´', reply_markup=kb_cancel)
        elif data['format']=='–¢–µ–∫—Å—Ç':
            if message.content_type == 'text':
                data['mat']=message.text
                await sq.sql_change_line(message.from_user.id)
            else:
                await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Çüö´', reply_markup=kb_cancel)
        elif data['format']=='–§–∞–π–ª':
            if message.content_type == 'document':
                data['mat']=message.document.file_id
                await sq.sql_change_line(message.from_user.id)
            else:
                await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Çüö´', reply_markup=kb_cancel) 
    if await sq.sql_get_count_is_max(message.from_user.id):
        await FSMLoad.name.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞', reply_markup=kb_cancel)
      
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
async def load_name(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    async with state.proxy() as data:
        data['subject'] = message.text
        data['mat'] = str(data['mat'])
    await FSMLoad.description.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
async def load_description(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    async with state.proxy() as data:
        data['description'] = message.text
    await FSMLoad.price.set()
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É', reply_markup=kb_cancel)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def load_price(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    async with state.proxy() as data:
        try:
            message.text=message.text.replace(',','.')
            price = float(message.text)
            if price<0.01:
                await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.01 coinüö´', reply_markup=kb_cancel)
                return
            if len(str(price).split('.')[1])>2:
                await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –º–µ–Ω—å—à–µ —Ç—Ä–µ—Öüö´', reply_markup=kb_cancel)
                return
            data['price'] = float(message.text)
            user = await sq.sql_get_unflsfb(message.from_user.id)
            data['nickname'] = user[1]
            data['school_name'] = str(user[4])
            data['form'] = str(user[5])
            cur_date=str(date.today()).split('-')[::-1]
            cur_date='.'.join(cur_date)
            mat_info = {'mat': data['mat'], 'format': data['format'],'school_name': data['school_name'], 'subject': data['subject'],
                        'description': data['description'], 'price': data['price'], 'nickname': data['nickname'],
                        'form': data['form'],  'date': cur_date, }
            await sq.sql_add_materials(mat_info)
            await sq.sql_delete_line(message.from_user.id)
            await state.finish()
            await message.answer('–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=kb_client)
        except  ValueError:
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æüö´', reply_markup=kb_cancel)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_load(dp: Dispatcher):
    dp.register_message_handler(load_start, lambda message: 'üöÄ–ó–∞–≥—Ä—É–∑–∏—Ç—å' in message.text)
    dp.register_message_handler(load_choice, state=FSMLoad.choice)
    dp.register_message_handler(load_count, state=FSMLoad.count)
    dp.register_message_handler(load_count, content_types=['photo'], state=FSMLoad.count)
    dp.register_message_handler(load_material, content_types=['photo','voice','text','document'], state=FSMLoad.load)
    dp.register_message_handler(load_name, state=FSMLoad.name)
    dp.register_message_handler(load_description, state=FSMLoad.description)
    dp.register_message_handler(load_price, state=FSMLoad.price)
