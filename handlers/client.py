from aiogram import types, Dispatcher
from create_bot import bot
from keyboards import kb_reg, kb_client, kb_cancel
from data_base import sql_db
from create_bot import adminList
from handlers.registration import cancel_handler
from aiogram.dispatcher import FSMContext

# –ó–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def write_history(id, username, message):
    with open('history.txt', 'a', encoding="UTF-8") as f:
        if username is None: username = 'None'
        f.write(str(id) + '  ' + username + ' : ' + str(message) + '\n')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_user(message: types.Message, state = 0):
    data = await sql_db.sql_get_unflsfb(message.from_user.id)
    reply_markup = kb_reg if data is None else kb_client
    if state != 0: await state.finish()
    if not message.from_user.username:
        await message.answer(
            '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ telegram.',
            reply_markup=reply_markup)
        return False
    if data is None:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=reply_markup)
        return False
    else:
        if message.from_user.username != data[1]:
            await sql_db.sql_update_username(data[0], message.from_user.username)
    return True


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∏–ø –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def load_warning(message=types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message )): return
    await message.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º "üöÄ–ó–∞–≥—Ä—É–∑–∏—Ç—å"', reply_markup=kb_client)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∏–ø –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
async def unsupported_types_warning(message=types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message)): return
    await message.reply('–≠—Ç–æ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', reply_markup=kb_client)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞
async def fhelp(message=types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message)): return
    await message.answer('/help - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π\n\n–ö–Ω–æ–ø–∫–∏:\n"üîî–ù–æ–≤–µ–Ω—å–∫–æ–µ" - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –í–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫\
    \n"üöÄ–ó–∞–≥—Ä—É–∑–∏—Ç—å" - –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª\n"üë§–ü—Ä–æ—Ñ–∏–ª—å" - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ\n"üí∏–ü–µ—Ä–µ–≤–æ–¥" - –ø–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É\
    \n\n/show_subs - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å—ã –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö\n/new_sub - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ –∫–ª–∞—Å—Å\
    \n/delete_sub - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞–∫–æ–≥–æ-—Ç–æ –∫–ª–∞—Å—Å–∞\n/change_name - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è\n/mes_admin - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É\
    \n/balance - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—á–µ—Ç—É\n/complain - –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ\n/delete_user - —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å\
    \n/donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è –º–æ–Ω–µ—Ç–∞–º–∏)',
                         reply_markup=kb_client)


# –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_balance(message=types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message)): return
    data = await sql_db.sql_get_unflsfb(message.from_user.id)
    await message.answer(f'–ù–∞ —Å—á–µ—Ç—É: @{data[1]}\n{data[-1]} coinüíé', reply_markup=kb_client)


# –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_account(message=types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message )): return
    data = await sql_db.sql_get_unflsfb(message.from_user.id)
    username = '@' + data[1]
    await message.answer(
        f'–ù–∏–∫–Ω–µ–π–º: *{username}*\n–ò–º—è: *{data[2]}*\n–§–∞–º–∏–ª–∏—è: *{data[3]}*\n–ö–ª–∞—Å—Å: *{data[5]}*\n–ë–∞–ª–∞–Ω—Å: *{data[-1]}* coinüíé',
        reply_markup=kb_client, parse_mode=types.ParseMode.MARKDOWN)


# –£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def del_user(message=types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message)): return
    await sql_db.sql_delete_user(message.from_user.id)
    await message.answer('–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞', reply_markup=kb_reg)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_subscriptions(message=types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message)): return
    await bot.send_message(message.from_user.id, await sql_db.sql_show_subscriptions(message))


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
async def show_mat(callback: types.CallbackQuery):
    if not (await check_user(callback)): return
    b = float((await sql_db.sql_get_unflsfb(callback.message.chat['id']))[-1])
    row_id = ''
    for i in callback.message.text[::-1]:
        if i == '#':
            break
        row_id += i
    row_id = row_id[::-1]
    price = float(await sql_db.sql_get_price(row_id))
    if b < price:
        await callback.answer('–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=kb_client)
    else:
        await sql_db.sql_show_material(callback, row_id)
        await callback.answer()


# –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
async def hide_mat(callback: types.CallbackQuery):
    if not (await check_user(callback)): return
    await bot.delete_message(callback.message.chat['id'], callback.message.message_id)
    await callback.answer()


# –£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def del_mat(callback: types.CallbackQuery):
    if not (await check_user(callback)): return
    b = float((await sql_db.sql_get_unflsfb(callback.message.chat['id']))[-1])
    row_id = ''
    for i in callback.message.text[::-1]:
        if i == '#':
            break
        row_id += i
    row_id = row_id[::-1]
    await sql_db.sql_del_material(callback, row_id)
    await bot.delete_message(callback.message.chat['id'], callback.message.message_id)
    await callback.answer()

# –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ —Ç–µ–∫—Å—Ç
async def get_no_messages(message=types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message)): return
    await message.answer('–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Çüö´', reply_markup=kb_client)


# –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π –æ –Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def read_materials(message: types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message)): return
    await sql_db.sql_read_materials(message)


# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
async def donate(message: types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message)): return
    await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–æ–π —Ç—Ä—É–¥üòä')
    await message.answer('https://yoomoney.ru/to/4100116978687558', disable_web_page_preview=True)


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª
async def complain(message: types.Message):
    await write_history(message.from_user.id, message.from_user.username, message.text)
    if not (await check_user(message)): return
    await message.answer('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    await message.answer('–û—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å. –ë–æ—Ç –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è—Ç—å\
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏—Ö –ª–∏–º–∏—Ç. –í–æ–∑–Ω–∏–∫–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∂–∞–ª–æ–±.\n–ï—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:\
    \n–°–æ–∑–¥–∞—Ç—å "–æ—Ç—Ä—è–¥" –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∂–∞–ª–æ–±—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.\
    \n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ–µ–π —Å –ø–æ–º–æ—â—å—é /mes_admin', reply_markup=kb_client)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_client(dp=Dispatcher):
    dp.register_message_handler(fhelp, commands=['help'])
    dp.register_message_handler(del_user, commands=['delete_user'])
    dp.register_message_handler(donate, commands=['donate'])
    dp.register_message_handler(complain, commands=['complain'])
    dp.register_message_handler(show_balance, commands=['balance'])
    dp.register_message_handler(show_balance, lambda message: 'üíé–ë–∞–ª–∞–Ω—Å' in message.text)
    dp.register_message_handler(show_account, lambda message: 'üë§–ü—Ä–æ—Ñ–∏–ª—å' in message.text)
    dp.register_message_handler(read_materials, lambda message: 'üîî–ù–æ–≤–µ–Ω—å–∫–æ–µ' in message.text)
    dp.register_message_handler(show_subscriptions, commands=['show_subs'])
    dp.register_callback_query_handler(show_mat, text='new_buy')
    dp.register_callback_query_handler(hide_mat, text='new_cancel')
    dp.register_callback_query_handler(del_mat, text='new_delete')
    dp.register_message_handler(load_warning, content_types=['photo', 'document', 'voice'])
    dp.register_message_handler(get_no_messages, content_types=['text', 'sticker'])
    dp.register_message_handler(unsupported_types_warning,
                                content_types=['music', 'audio', 'video_note', 'location', 'contact', 'venue'])
