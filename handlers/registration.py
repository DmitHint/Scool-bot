from data_base.sql_db import sql_add_user, sql_get_unflsfb
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from handlers import client, message_to_admin
from keyboards import kb_cancel, kb_client, kb_reg
from config import cities, schools
from data_base.sql_db import sql_delete_line


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
async def check_city(nameOfCity):
    for city,variants in cities.items():
        for name in variants:
            if nameOfCity.lower() == name:
                return city 
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∫–æ–ª—ã 
async def check_school(nameOfSchool, nameOfCity):
    for school,variants in schools[nameOfCity].items():
        for name in variants:
            endName = nameOfSchool.lower()
            for c in ' "‚Ññ¬´¬ª':
                endName = endName.replace(c,'')
            endName = endName.lower()
            if endName == name: return school
    return False
class FSMReg(StatesGroup):
    city = State()
    school_name = State()
    first_name = State()
    last_name = State()
    form = State()


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def welcome(message=types.Message,state=FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    data = await sql_get_unflsfb(message.from_user.id)
    if not message.from_user.username: await client.check_user(message)
    elif data is None:
        if '‚úÖ–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' in message.text:
            await reg_start(message)
            return
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.', reply_markup=kb_reg)
    else:
        if '‚úÖ–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' in message.text:
            await message.answer(f'{data[2]}, –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=kb_client)
        elif message.text == '/start':
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {data[2]}', reply_markup=kb_client)

# –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π (—Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö)
async def cancel_handler(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message, state)): return
    current_state = await state.get_state()
    await message.answer('–í–∞—Å –ø–æ–Ω—è–ªüëÄ', reply_markup=kb_client)
    if current_state is None:
        return
    await sql_delete_line(message.from_user.id)
    await state.finish()

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —É–∑–Ω–∞–µ–º –≥–æ—Ä–æ–¥
async def reg_start(message: types.Message):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    await message.answer('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —É—á–∏—Ç–µ—Å—å?', reply_markup=kb_cancel)
    await FSMReg.city.set()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–ø—Ä–æ—Å —à–∫–æ–ª—ã
async def get_city(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if message.text.isalpha():
        if await check_city(message.text):
            async with state.proxy() as data:
                data['city'] = await check_city(message.text)
                data['user_id'] = message.from_user.id
                data['nickname'] = message.from_user.username
            await message.answer('–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ?', reply_markup=kb_cancel)
            await FSMReg.next()
        else:
            await message.answer('–¢–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤ –º–æ–µ–π –±–∞–∑–µ –Ω–µ—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É: /mes_admin')
    else:
        await message.answer('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µüö´', reply_markup=kb_cancel)

# –£–∑–Ω–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–º —à–∫–æ–ª—É
async def get_school(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    async with state.proxy() as data:
        if await check_school(message.text, data['city']):
            data['school_name'] = await check_school(message.text, data['city'])
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è', reply_markup=kb_cancel)
            await FSMReg.first_name.set()
        else:
            await message.answer('–¢–∞–∫–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ –º–æ–µ–π –±–∞–∑–µ –Ω–µ—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É: /mes_admin')

# –ë–µ—Ä–µ–º first_name
async def get_first_name(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if message.text.isalpha():
        async with state.proxy() as data:
            data['user_id'] = message.from_user.id
            data['nickname'] = message.from_user.username
            data['first_name'] = message.text
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é', reply_markup=kb_cancel)
        await FSMReg.next()
    else:
        await message.answer('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µüö´', reply_markup=kb_cancel)

# –ë–µ—Ä–µ–º last_name
async def get_last_name(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if message.text.isalpha():
        async with state.proxy() as data:
            data['last_name'] = message.text
        await message.answer('–í –∫–∞–∫–æ–º –≤—ã –∫–ª–∞—Å—Å–µ? –ù–∞–ø—Ä–∏–º–µ—Ä, 9–ê', reply_markup=kb_cancel)
        await FSMReg.next()
    else:
        await message.answer('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µüö´', reply_markup=kb_cancel)

# –ë–µ—Ä–µ–º form –∏ letter, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
async def get_form(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    kirill = ('–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø')
    l = ''
    form = ''
    for c in message.text:
        if c.isdigit():
            form += c
        if c.capitalize() in kirill:
            l += c.capitalize()
    if form == '':
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞üö´', reply_markup=kb_cancel)
    elif int(form) < 1 or int(form) > 11:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞üö´', reply_markup=kb_cancel)
    elif len(l) != 1:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞üö´', reply_markup=kb_cancel)
    else:
        async with state.proxy() as data:
            data['form'] = form+'-'+l
            data['balance'] = 20.0
            data['subscription'] = (f'["{data["form"]}"]')
            nb = data['balance']
        await message.answer(f'–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –∂–µ–ª–∞—é —É—Å–ø–µ—Ö–æ–≤ –≤ —É—á–µ–±–µüòâ\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {nb} coinüíé', reply_markup=kb_client)
        await sql_add_user(state)
        await state.finish()
        await client.fhelp(message)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_registration(dp: Dispatcher):
    dp.register_message_handler(message_to_admin.text_start, commands=['mes_admin'], state='*')
    dp.register_message_handler(welcome, commands=['start'])
    dp.register_message_handler(welcome, lambda message: '‚úÖ–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' in message.text, state='*')
    dp.register_message_handler(cancel_handler, lambda message: '‚ùå–û—Ç–º–µ–Ω–∞' in message.text, state='*')
    dp.register_message_handler(get_city, state=FSMReg.city)
    dp.register_message_handler(get_school, state=FSMReg.school_name)
    dp.register_message_handler(get_first_name, state=FSMReg.first_name)
    dp.register_message_handler(get_last_name, state=FSMReg.last_name)
    dp.register_message_handler(get_form, state=FSMReg.form)
