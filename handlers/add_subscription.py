from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from data_base.sql_db import sql_get_subscription, sql_update_subscription, sql_check_form
from keyboards import kb_cancel, kb_client
from handlers import client


class FSM_new_subscription(StatesGroup):
    process = State()
   

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
async def add_subscription_start(message: types.Message):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –í—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', reply_markup=kb_cancel)
    await FSM_new_subscription.process.set()

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
async def finish_add_subscription(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    kirill = ('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
    l=''
    form=''
    subscription=await sql_get_subscription(message)
    for c in message.text:
        if c.isdigit():
            form+=c
        if c.lower() in kirill:
            l += c.lower()
    if form == '':
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞üö´', reply_markup=kb_cancel)
    elif int(form) < 1 or int(form)>11:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞üö´', reply_markup=kb_cancel)
    elif len(l)!=1:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞üö´', reply_markup=kb_cancel)
    else:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
        form=form+'-'+l.capitalize()
        if form in subscription:
            await message.answer('–ù–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ãüö´', reply_markup=kb_cancel)
            return    
        subscription.append(form)
        await sql_update_subscription(subscription,message.from_user.id)
        await message.answer('–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è '+form+' –∫–ª–∞—Å—Å–∞',reply_markup=kb_client)
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º
        if not(await sql_check_form(message, form)):
            await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É—á–µ–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ *Scool*, –Ω–µ—Ç. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∏–º–∏ –±–æ—Ç–æ–ºüôÉ',\
                reply_markup=kb_client,parse_mode=types.ParseMode.MARKDOWN)
                
        await state.finish()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_add_subscription(dp: Dispatcher):
    dp.register_message_handler(add_subscription_start, commands=['new_sub'])
    dp.register_message_handler(finish_add_subscription, state=FSM_new_subscription.process)