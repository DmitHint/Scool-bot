from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from data_base import sql_db as sq
from keyboards import kb_client, kb_cancel
from handlers import client


class FSMSend(StatesGroup):
   amount = State()
   user_name = State()

# –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞
async def send_start(message: types.Message):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É',reply_markup=kb_cancel)
    await FSMSend.amount.set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
async def get_amount(message: types.Message, state = FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    global amount
    try:
        amount=float(message.text)
        if amount<0.01:
            await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.01 coinüö´', reply_markup=kb_cancel)
            return
        if len(str(amount).split('.')[1])>2:
                await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –º–µ–Ω—å—à–µ —Ç—Ä–µ—Öüö´', reply_markup=kb_cancel)
                return
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æüö´', reply_markup=kb_cancel)
        return
    balance = await sq.sql_get_unflsfb(message.from_user.id)
    balance=float(balance[-1])
    if (balance >= amount):
        async with state.proxy() as data:
            data['amount'] = amount
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=kb_cancel)
        await FSMSend.next()
    else:
        await message.answer(f'–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n–£ –≤–∞—Å –µ—Å—Ç—å {balance} coinüíé', reply_markup=kb_cancel)


# –ü–æ–ª—É—á–µ–Ω–∏–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    if message.text[0] == '@': message.text = message.text[1:]
    if await sq.sql_check_payee(message.text):
        user=await sq.sql_get_unflsfb(message.from_user.id)
        user=user[1]
        if message.text==user:
            await message.answer('–ù–µ–ª—å–∑—è –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ', reply_markup=kb_cancel)
        else:
            async with state.proxy() as data:
                data['user_name'] = message.text
            await FSMSend.next()
            await transfer(message,state)
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç', reply_markup=kb_cancel)
   
# –ü–µ—Ä–µ–≤–æ–¥
async def transfer(message: types.Message, state: FSMContext):
    await client.write_history(message.from_user.id, message.from_user.username, message.text)
    if not(await client.check_user(message)): return
    await sq.sql_send_coin(message, state)
    await message.answer(f'–£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ {amount} coinüéä',reply_markup=kb_client)
    await state.finish()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_send(dp: Dispatcher):
    dp.register_message_handler(send_start, lambda message: 'üí∏–ü–µ—Ä–µ–≤–æ–¥' in message.text)
    dp.register_message_handler(get_amount, state=FSMSend.amount)
    dp.register_message_handler(get_user, state=FSMSend.user_name)
   

